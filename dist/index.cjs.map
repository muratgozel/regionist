{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { findCountryLanguages, findCountryFromTimezoneName, findCountryTimezones, findCountryCallingCode, findCountryCurrencyCode } from 'locale-util'\n\nexport class Regionist {\n    isDomAvailable = typeof window !== 'undefined'\n\n    findings: RegionistFindings = {}\n    timezone?: string\n    country?: string\n    locale?: RegionistLocale\n    preferredLocale?: RegionistLocale\n    callingCode?: number\n    currencyCode?: string\n\n    constructor () {\n        this.identify()\n        this.guess()\n        this.guessFurther()\n    }\n\n    findClosestLocale(localeLikes: string[] = [], defaultLocale?: string): string {\n        const formatted = localeLikes.map((lang) => this.convertLocaleLikeTextToObject(lang))\n        if (!formatted || formatted.length === 0) {\n            return defaultLocale ?? localeLikes[0] ?? ''\n        }\n\n        const format = localeLikes.some((text) => text.includes('_')) ? 'iso' : localeLikes.some((text) => /[A-Z]/.test(text)) ? 'ietf' : 'url'\n\n        const localeMatch = formatted.find(({ language, country }) => this.locale?.language === language && this.locale?.country === country)\n        if (localeMatch) return this.convertLocaleObjectToText(localeMatch, format)\n\n        const countryMatch = formatted.find(({ country }) => this.country === country)\n        if (countryMatch) return this.convertLocaleObjectToText(countryMatch, format)\n\n        const languageMatch = formatted.find(({ language }) => this.locale?.language === language)\n        if (languageMatch) return this.convertLocaleObjectToText(languageMatch, format)\n\n        const preferredLocaleMatch = formatted.find(({ language, country }) => this.preferredLocale?.language === language && this.preferredLocale?.country === country)\n        if (preferredLocaleMatch) return this.convertLocaleObjectToText(preferredLocaleMatch, format)\n\n        const preferredCountryMatch = formatted.find(({ country }) => this.preferredLocale?.country === country)\n        if (preferredCountryMatch) return this.convertLocaleObjectToText(preferredCountryMatch, format)\n\n        const preferredLanguageMatch = formatted.find(({ language }) => this.preferredLocale?.language === language)\n        if (preferredLanguageMatch) return this.convertLocaleObjectToText(preferredLanguageMatch, format)\n\n        return defaultLocale ?? ''\n    }\n\n    toObject(): RegionistOutput {\n        return {\n            timezone: this.timezone,\n            country: this.country,\n            locale: this.locale,\n            preferredLocale: this.preferredLocale,\n            callingCode: this.callingCode,\n            currencyCode: this.currencyCode\n        }\n    }\n\n    identify () {\n        if (!this.isDomAvailable) return\n\n        // read window.Intrl object\n        try {\n            const result = Intl.DateTimeFormat().resolvedOptions()\n            this.findings.windowIntlTimezone = result.timeZone\n            this.findings.windowIntlLocale = result.locale\n        } catch (error) {\n            return\n        }\n\n        // read window.navigator\n        const n = window.navigator\n        if (('languages' in n) && n.languages && n.languages.length > 0) this.findings.windowNavigatorLanguages = Array.from(n.languages)\n        else if (n.language) this.findings.windowNavigatorLanguages = [n.language]\n    }\n\n    guess () {\n        const formattedWindowNavigatoLanguages = this.findings.windowNavigatorLanguages\n            ? this.findings.windowNavigatorLanguages.map((lang) => this.convertLocaleLikeTextToObject(lang))\n            : []\n        if (formattedWindowNavigatoLanguages && formattedWindowNavigatoLanguages.length > 0 && formattedWindowNavigatoLanguages[0].country) {\n            this.preferredLocale = formattedWindowNavigatoLanguages[0]!\n        }\n\n        if (this.findings.windowIntlTimezone) {\n            this.timezone = this.findings.windowIntlTimezone\n            this.country = findCountryFromTimezoneName(this.timezone)!\n\n            const possibleLanguages = findCountryLanguages(this.country)\n            if (possibleLanguages && possibleLanguages.length === 1 && this.country) {\n                this.locale = { language: possibleLanguages[0], country: this.country }\n                return\n            }\n\n            if (possibleLanguages && possibleLanguages.length > 1 && this.country) {\n                const bestPossibleLanguage = possibleLanguages.find((lang) => formattedWindowNavigatoLanguages.some(({ language }) => language === lang))\n                if (bestPossibleLanguage) {\n                    this.locale = { language: bestPossibleLanguage, country: this.country }\n                    return\n                }\n            }\n        }\n\n        if (this.preferredLocale && !this.timezone) {\n            const possibleTimezones = findCountryTimezones(this.preferredLocale.country!)\n            if (possibleTimezones) {\n                this.timezone = possibleTimezones[0].country\n            }\n            this.country = this.preferredLocale.country!\n            this.locale = this.preferredLocale\n            return\n        }\n\n        return\n    }\n\n    guessFurther () {\n        if (!this.country) return\n        this.callingCode = findCountryCallingCode(this.country)!\n        this.currencyCode = findCountryCurrencyCode(this.country)!\n    }\n\n    convertLocaleLikeTextToObject (text: string): RegionistLocale {\n        if (!text.includes('-') && !text.includes('_')) return { language: text.toLowerCase() }\n\n        const _text = text.replace('-', '_')\n        return {\n            language: _text.slice(0, _text.lastIndexOf('_')),\n            country: _text.slice(_text.lastIndexOf('_') + 1)\n        }\n    }\n\n    convertLocaleObjectToText (obj: RegionistLocale, format: 'iso' | 'url' | 'ietf' = 'iso') {\n        return this.formatLocaleText(obj.language + '-' + obj.country?.toUpperCase(), format)\n    }\n\n    formatLocaleText (v: string, format: 'iso' | 'url' | 'ietf' = 'iso'): string {\n        const sep = format === 'iso' ? '_' : '-'\n\n        if (v.length < 3 || (!v.includes('-') && !v.includes('_'))) {\n            return v.toLowerCase()\n        }\n\n        const parts = v.split(/(_|-)/)\n        return parts[0].toLowerCase() + sep + (format === 'iso' || format === 'ietf' ? parts[2].toUpperCase() : parts[2].toLowerCase())\n    }\n}\n\nexport const regionist = new Regionist()\n\nexport interface RegionistLocale {\n    language: string\n    country?: string\n}\n\nexport interface RegionistFindings {\n    windowIntlTimezone?: string\n    windowIntlLocale?: string\n    windowNavigatorLanguages?: string[]\n}\n\nexport interface RegionistOutput {\n    timezone: string | undefined\n    country: string | undefined\n    locale: RegionistLocale | undefined\n    preferredLocale: RegionistLocale | undefined\n    callingCode: number | undefined\n    currencyCode: string | undefined\n}\n"],"names":["findCountryFromTimezoneName","findCountryLanguages","findCountryTimezones","findCountryCallingCode","findCountryCurrencyCode"],"mappings":"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"}