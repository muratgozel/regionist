{"version":3,"file":"index.js","sources":["../../../build/regionist.js"],"sourcesContent":["import store from 'store/dist/store.modern.js';\nimport { languageCodes, countryCodes, timezones, countryLanguages, countryCallingCodes, countryCurrencies } from 'locale-util';\nexport class Regionist {\n    timezone = null;\n    country = null;\n    nativeLanguage = null;\n    preferredLanguage = null;\n    locale = null;\n    callingCode = null;\n    currencyCode = null;\n    languages = languageCodes;\n    countries = countryCodes;\n    timezones = timezones;\n    countryLanguages = countryLanguages;\n    countryCallingCodes = countryCallingCodes;\n    countryCurrencies = countryCurrencies;\n    #localStorageIdentifier = '_regionist';\n    #prev = null;\n    #browserLocaleLikes = [];\n    guess(opts = { remember: false }) {\n        this.#browserLocaleLikes = this.generateLocaleLikesFromNavigator();\n        this.timezone = this.guessTimezone();\n        this.country = this.guessCountry();\n        this.nativeLanguage = this.findNativeLanguage();\n        this.preferredLanguage = this.findPreferredLanguage();\n        this.callingCode = this.findCallingCode();\n        this.currencyCode = this.findCurrencyCode();\n        this.locale = this.constructLocale();\n        if (opts.remember) {\n            this.remember();\n            store.set(this.#localStorageIdentifier, {\n                timezone: this.timezone,\n                country: this.country,\n                nativeLanguage: this.nativeLanguage,\n                preferredLanguage: this.preferredLanguage,\n                locale: this.locale,\n                callingCode: this.callingCode,\n                currencyCode: this.currencyCode\n            });\n        }\n        return this;\n    }\n    toObject() {\n        return {\n            timezone: this.timezone,\n            country: this.country,\n            nativeLanguage: this.nativeLanguage,\n            preferredLanguage: this.preferredLanguage,\n            locale: this.locale,\n            callingCode: this.callingCode,\n            currencyCode: this.currencyCode\n        };\n    }\n    findBestMatch(localeLikes = []) {\n        if (!this.isArray(localeLikes))\n            return '';\n        if (localeLikes.length === 0)\n            return '';\n        const filtered = localeLikes.filter((str) => this.isLocale(str));\n        const localeMatch = filtered.find((lo) => this.localeToIso(lo) === this.locale);\n        if (localeMatch)\n            return localeMatch;\n        const countryMatch = filtered.find((lo) => lo.includes('_') ? lo.split('_')[1] === this.country : false);\n        if (countryMatch)\n            return countryMatch;\n        const languageMatch = filtered.find((lo) => lo.slice(0, 2) === this.nativeLanguage || lo.slice(0, 2) === this.preferredLanguage);\n        if (languageMatch)\n            return languageMatch;\n        return localeLikes[0];\n    }\n    matchUrlPath(path, fallback = '') {\n        const matches = path.split('/').filter((str) => typeof str === 'string' && str.length > 0);\n        if (matches && matches.length > 0) {\n            if (this.isLocale(matches[0])) {\n                return matches[0];\n            }\n        }\n        return fallback || '';\n    }\n    isArray(v) {\n        return (!!v) && (v.constructor === Array);\n    }\n    hasCountryChanged() {\n        return typeof this.#prev.country === 'string' && this.#prev.country !== this.country;\n    }\n    hasTimezoneChanged() {\n        return typeof this.#prev.timezone === 'string' && this.#prev.timezone !== this.timezone;\n    }\n    remember() {\n        this.#prev = new Regionist();\n        const obj = store.get(this.#localStorageIdentifier);\n        if (!obj) {\n            return this;\n        }\n        this.#prev.timezone = obj.timezone;\n        this.#prev.country = obj.country;\n        this.#prev.nativeLanguage = obj.nativeLanguage;\n        this.#prev.preferredLanguage = obj.preferredLanguage;\n        this.#prev.locale = obj.locale;\n        this.#prev.callingCode = obj.callingCode;\n        this.#prev.currencyCode = obj.currencyCode;\n        return this;\n    }\n    getPreviousGuess() {\n        return this.#prev;\n    }\n    constructLocale() {\n        if (this.nativeLanguage !== null && this.country !== null) {\n            return this.nativeLanguage + '_' + this.country;\n        }\n        else if (this.nativeLanguage === null && this.country === null) {\n            return '';\n        }\n        else {\n            return (this.nativeLanguage || this.country);\n        }\n    }\n    /**\n     * Returns the currency code for either the given country or the user's country.\n     *\n     * @param country {CountryCode | undefined}\n     * @returns {CurrencyCode | null}\n     */\n    findCurrencyCode(country = undefined) {\n        if (country !== undefined) {\n            return this.countryCurrencies[country] || null;\n        }\n        else if (this.country !== null) {\n            return this.countryCurrencies[this.country] || null;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Returns the calling code for either the given country or the user's country.\n     *\n     * @param country {CountryCode | undefined}\n     * @returns {number | null}\n     */\n    findCallingCode(country = undefined) {\n        if (country !== undefined) {\n            return this.countryCallingCodes[country] || null;\n        }\n        else if (this.country !== null) {\n            return this.countryCallingCodes[this.country] || null;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Finds the first language in the user's browser language preferences.\n     *\n     * @returns {LanguageCode | null}\n     */\n    findPreferredLanguage() {\n        const results = this.#browserLocaleLikes\n            .map((l) => this.isLanguage(l) ? l : this.parseLocaleLike(l).lang)\n            .filter((l) => this.isLanguage(l));\n        return results.length === 0 ? null : results[0];\n    }\n    /**\n     * Guesses the user's native language based on timezone and browser language preferences.\n     * It prioritizes the language found based on the country which is based on the timezone.\n     * It looks for browser language preferences otherwise.\n     *\n     * @returns {LanguageCode | null}\n     */\n    findNativeLanguage() {\n        const possibles = this.#browserLocaleLikes\n            .map((l) => this.isLanguage(l) ? l : this.parseLocaleLike(l).lang)\n            .filter((l) => this.isLanguage(l));\n        if (this.country === null) {\n            return possibles.length > 0 ? possibles[0] : null;\n        }\n        const more = this.countryLanguages[this.country];\n        const result = more.find((l) => possibles.includes(l));\n        if (result) {\n            return result;\n        }\n        return more[0];\n    }\n    /**\n     * Guesses the user's country based on timezone and browser language preferences.\n     *\n     * @returns {CountryCode | null}\n     */\n    guessCountry() {\n        if (this.timezone) {\n            const result = this.timezones.find(({ name }) => name === this.timezone);\n            if (result) {\n                return result.country;\n            }\n        }\n        if (this.#browserLocaleLikes.length > 0) {\n            const results = this.#browserLocaleLikes.filter((l) => l.length > 2);\n            if (results && results.length > 0) {\n                return this.parseLocaleLike(results[0]).country;\n            }\n        }\n        return null;\n    }\n    /**\n     * Guesses the user's timezone based on window.Intl global object.\n     *\n     * @returns {string | null}\n     */\n    guessTimezone() {\n        try {\n            return Intl.DateTimeFormat().resolvedOptions().timeZone;\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    generateLocaleLikesFromNavigator() {\n        let result = [];\n        if (!('navigator' in window))\n            return result;\n        const n = window.navigator;\n        if (('languages' in n) && n.languages && n.languages.length > 0)\n            result = Array.from(n.languages);\n        else if (n.language)\n            result = [n.language];\n        else\n            return result;\n        return result.map(r => this.localeToIso(r));\n    }\n    /**\n     * Converts a locale-like string to ISO format. For example, 'en-us' (or 'en_us') becomes 'en_US'.\n     *\n     * @param v - locale-like string\n     * @returns {string}\n     */\n    localeToIso(v) {\n        if (typeof v !== 'string')\n            return '';\n        const obj = this.parseLocaleLike(v);\n        if (typeof obj.lang === 'string' && typeof obj.country === 'string') {\n            return `${obj.lang}_${obj.country}`;\n        }\n        else if (typeof obj.lang === 'string') {\n            return obj.lang;\n        }\n        else if (typeof obj.country === 'string') {\n            return obj.country;\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * Converts a locale-like string to url-safe format. For example, 'en_US' (or 'en-US') becomes 'en-us'.\n     *\n     * @param v - locale-like string\n     * @returns {string}\n     */\n    localeToUrlSafe(v) {\n        if (typeof v !== 'string')\n            return '';\n        const obj = this.parseLocaleLike(v);\n        if (typeof obj.lang === 'string' && typeof obj.country === 'string') {\n            return `${obj.lang}-${obj.country.toLowerCase()}`;\n        }\n        else if (typeof obj.lang === 'string') {\n            return obj.lang;\n        }\n        else if (typeof obj.country === 'string') {\n            return obj.country.toLowerCase();\n        }\n        else {\n            return '';\n        }\n    }\n    parseLocaleLike(v) {\n        const result = { lang: null, country: null };\n        if (typeof v !== 'string')\n            return result;\n        const arr = v.split(/(_|-)/);\n        if (arr.length === 1) {\n            arr[0] = arr[0].toLowerCase();\n            if (this.isLanguage(arr[0])) {\n                result.lang = arr[0];\n            }\n            return result;\n        }\n        if (arr.length === 3) {\n            arr[0] = arr[0].toLowerCase();\n            arr[2] = arr[2].toUpperCase();\n            if (this.isLanguage(arr[0]) && this.isCountry(arr[2])) {\n                result.lang = arr[0];\n                result.country = arr[2];\n            }\n            return result;\n        }\n        return result;\n    }\n    isLocale(v) {\n        if (typeof v !== 'string')\n            return false;\n        if (v.length < 2)\n            return false;\n        const arr = v.split(/(_|-)/);\n        if (arr.length === 1) {\n            return this.isLanguage(arr[0]);\n        }\n        if (arr.length === 3) {\n            return this.isLanguage(arr[0]) && this.isCountry(arr[2]);\n        }\n        return false;\n    }\n    isLanguage(v) {\n        return typeof v === 'string' && this.languages.find((lang) => lang === v.toLowerCase()) !== undefined;\n    }\n    isCountry(v) {\n        return typeof v === 'string' && this.countries.find((c) => c === v.toUpperCase()) !== undefined;\n    }\n}\nconst regionist = new Regionist();\nexport { regionist, languageCodes, countryCodes, timezones, countryLanguages, countryCallingCodes, countryCurrencies };\n"],"names":["_localStorageIdentifier","_WeakMap","_prev","_browserLocaleLikes","Regionist","_classCallCheck","_defineProperty","languageCodes","countryCodes","timezones","countryLanguages","countryCallingCodes","countryCurrencies","_classPrivateFieldInitSpec","writable","value","_createClass","key","guess","opts","arguments","length","undefined","remember","_classPrivateFieldSet","generateLocaleLikesFromNavigator","timezone","guessTimezone","country","guessCountry","nativeLanguage","findNativeLanguage","preferredLanguage","findPreferredLanguage","callingCode","findCallingCode","currencyCode","findCurrencyCode","locale","constructLocale","store","set","_classPrivateFieldGet","toObject","findBestMatch","_this","localeLikes","isArray","filtered","_filterInstanceProperty","call","str","isLocale","localeMatch","_findInstanceProperty","lo","localeToIso","countryMatch","_includesInstanceProperty","split","languageMatch","_sliceInstanceProperty","matchUrlPath","path","_context","fallback","matches","v","constructor","Array","hasCountryChanged","hasTimezoneChanged","obj","get","getPreviousGuess","_context2","_context3","_this2","results","_mapInstanceProperty","l","isLanguage","parseLocaleLike","lang","_context4","_context5","_this3","possibles","more","result","_this4","_context6","_ref","name","_context7","Intl","DateTimeFormat","resolvedOptions","timeZone","error","_this5","window","n","navigator","languages","_Array$from","language","r","_context8","_concatInstanceProperty","concat","localeToUrlSafe","_context9","toLowerCase","arr","toUpperCase","isCountry","_context10","_context11","countries","c","regionist"],"mappings":"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"}