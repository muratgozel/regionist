{"version":3,"file":"index.js","sources":["../../../src/Regionist.js"],"sourcesContent":["import jstz from 'locale-util/data/jstz/index.js'\nimport timezones from 'locale-util/data/extra/timezonesByCountry.json'\nimport countryLanguages from 'locale-util/data/extra/countryOfficialLanguages.json'\nimport callingCodes from 'locale-util/data/core/phoneNumberMetadata.json'\nimport currencyCodes from 'locale-util/data/extra/currencyCodesByCountry.json'\nimport store from 'store/dist/store.modern.js'\n\nclass Regionist {\n  #browserLocaleLikes = []\n  #localStorageIdentifier = '_regionist'\n  #prev = null\n\n  languages = Object.keys(countryLanguages).reduce(function (memo, c) {\n    countryLanguages[c].map(l => memo.indexOf(l) === -1 ? memo.push(l) : null)\n    return memo\n  }, [])\n\n  countries = Object.keys(countryLanguages)\n\n  constructor(params={}) {\n    this.timezone = params.timezone || null\n    this.country = params.country || null\n    this.nativeLanguage = params.nativeLanguage || null\n    this.preferredLanguage = params.preferredLanguage || null\n    this.locale = params.locale || null\n    this.callingCode = params.callingCode || null\n    this.currencyCode = params.currencyCode || null\n  }\n\n  guess(opts={remember: false}) {\n    this.#browserLocaleLikes = this.generateLocaleLikesFromNavigator()\n    this.timezone = this.guessTimezone()\n    this.country = this.guessCountry()\n    this.nativeLanguage = this.findNativeLanguage()\n    this.preferredLanguage = this.findPreferredLanguage()\n    this.locale = this.constructLocale()\n    this.callingCode = this.findCallingCode()\n    this.currencyCode = this.findCurrencyCode()\n\n    if (opts.remember) {\n      this.#prev = new Regionist( store.get(this.#localStorageIdentifier) )\n      store.set(this.#localStorageIdentifier, Object.keys(this).reduce((m, k) => m[k]=this[k], {}))\n    }\n\n    return this\n  }\n\n  isCountryChanged() {\n    return this.#prev.country != this.country && typeof this.country == 'string'\n  }\n\n  isTimezoneChanged() {\n    return this.#prev.timezone != this.timezone && typeof this.timezone == 'string'\n  }\n\n  findCurrencyCode() {\n    if (!this.country) return null;\n    if (!currencyCodes.hasOwnProperty(this.country)) return null;\n\n    return currencyCodes[this.country]\n  }\n\n  findCallingCode() {\n    if (!this.country) return null;\n    if (!callingCodes.hasOwnProperty(this.country)) return null;\n\n    return callingCodes[this.country]\n  }\n\n  constructLocale() {\n    return this.nativeLanguage + '_' + this.country\n  }\n\n  findPreferredLanguage() {\n    const languagesWithinhNavigator = this.#browserLocaleLikes.map(l => l.slice(0, 2))\n\n    if (languagesWithinhNavigator.length === 0) return null;\n\n    return languagesWithinhNavigator[0]\n  }\n\n  findNativeLanguage() {\n    const languagesWithinhNavigator = this.#browserLocaleLikes.map(l => l.slice(0, 2))\n\n    if (languagesWithinhNavigator.length === 0) return null;\n    if (!this.country) languagesWithinhNavigator[0]\n\n    const languagesWithinCountry = countryLanguages[this.country]\n\n    // the most suitable candidate for the native language is\n    // the language from navigator found in languagesWithinCountry\n    const possibleNativeLanguages = languagesWithinhNavigator\n      .filter(l => languagesWithinCountry.indexOf(l) !== -1)\n    if (possibleNativeLanguages && possibleNativeLanguages.length > 0) {\n      return possibleNativeLanguages[0]\n    }\n\n    // just return primary official language\n    return languagesWithinCountry[0]\n  }\n\n  guessCountry() {\n    // guess based on timezone first\n    let countriesWithinSameTimezone = []\n    if (this.timezone) {\n      const tz = this.timezone.toLowerCase()\n      countriesWithinSameTimezone = Object.keys(timezones).filter(country => {\n        const m = timezones[country].filter(_tz => _tz.toLowerCase() == tz)\n        return m && m.length > 0\n      })\n      // if there is only one just return it, we trust timezone\n      if (countriesWithinSameTimezone.length === 1) {\n        return countriesWithinSameTimezone[0]\n      }\n    }\n\n    // guess based on navigator\n    const countriesWithinNavigator = this.#browserLocaleLikes\n      .filter(l => l.indexOf('_') !== -1)\n      .map(l => l.split('_')[1])\n    \n    if (countriesWithinSameTimezone.length === 0 && countriesWithinNavigator.length > 0) {\n      return countriesWithinNavigator[0]\n    }\n\n    if (countriesWithinSameTimezone.length > 0 && countriesWithinNavigator.length === 0) {\n      // just throw first country\n      return countriesWithinSameTimezone[0]\n    }\n\n    if (countriesWithinSameTimezone.length === 0 && countriesWithinNavigator.length === 0) {\n      // impossible to guess\n      return null\n    }\n\n    const countryMatches = countriesWithinSameTimezone\n      .filter(country => countriesWithinNavigator.indexOf(country) !== -1)\n    if (countryMatches && countryMatches.length > 0) {\n      return countryMatches[0]\n    }\n\n    return countriesWithinSameTimezone[0]\n  }\n\n  guessTimezone() {\n    try {\n      return Intl.DateTimeFormat().resolvedOptions().timeZone\n    } catch (error) {\n      // Intl not supported, try jstz\n      return jstz.determine().name()\n    }\n  }\n\n  generateLocaleLikesFromNavigator() {\n    let result = []\n\n    if (!('navigator' in window)) return result\n\n    const n = window.navigator\n    if (('languages' in n) && n.languages && n.languages.length > 0) result = n.languages\n    else if (n.language) result = [n.language]\n    else if (n.userLanguage) result = [n.userLanguage]\n    else return result\n\n    return result.map(r => this.isoFormat(r))\n  }\n\n  isLanguage(v) {\n    return this.languages.indexOf(v) > -1\n  }\n\n  isCountry(v) {\n    if (typeof v != 'string') return false\n    return this.countries.indexOf(v.toUpperCase()) > -1\n  }\n\n  isLocale(v) {\n    if (!v) return false\n    if (typeof v != 'string') return false\n    if (v.length < 2) return false\n\n    const arr = v.split(/(_|-)/)\n\n    if (arr.length === 1) {\n      if (!this.isLanguage(arr[0])) return false\n\n      return true\n    }\n\n    if (arr.length === 3) {\n      if (!this.isLanguage(arr[0])) return false\n      if (!this.isCountry(arr[2])) return false\n\n      return true\n    }\n\n    return false\n  }\n\n  format(v) {\n    const arr = v.split(/(_|-)/)\n\n    if (arr.length === 1) {\n      return {lang: arr[0], country: null}\n    }\n\n    if (arr.length === 3) {\n      return {lang: arr[0], country: arr[2].toUpperCase()}\n    }\n\n    return {lang: null, country: null}\n  }\n\n  urlFormat(v) {\n    if (!this.isLocale(v)) return null;\n\n    const formatted = this.format(v)\n\n    return formatted.lang + (formatted.country ? '-' + formatted.country.toLowerCase() : '')\n  }\n\n  isoFormat(v) {\n    if (!this.isLocale(v)) return null;\n\n    const formatted = this.format(v)\n\n    return formatted.lang + (formatted.country ? '_' + formatted.country : '')\n  }\n\n  // picks the best language/locale from a given list\n  pick(localeLikes=[]) {\n    localeLikes = Array.isArray(localeLikes) ? localeLikes : [localeLikes]\n    localeLikes = localeLikes.filter(l => this.isLocale(l)).map(l => this.isoFormat(l))\n    \n    // match by order: locale + country + language\n\n    // locale match\n    const matches1 = localeLikes.filter(l => this.locale == l)\n    if (matches1 && matches1.length > 0) return matches1[0]\n\n    // country match\n    const matches2 = localeLikes.filter(l => {\n      const arr = l.split('_')\n      const country = arr.length === 2 ? arr[1] : null\n      if (country && country == this.country) return true;\n      return false\n    })\n    if (matches2 && matches2.length > 0) return matches2[0]\n\n    // language\n    const matches3 = localeLikes.filter(l => {\n      const arr = l.split('_')\n      const lang = arr[0]\n      const langMatch = lang == this.nativeLanguage || lang == this.preferredLanguage\n      if (langMatch) return true;\n      return false\n    })\n    if (matches3 && matches3.length > 0) return matches3[0]\n\n    return localeLikes[0]\n  }\n\n  pickFromUrl(fallback=null, path=null) {\n    const p = path || window.location.pathname\n    try {\n      const firstPath = p.split('/').filter(v => v)[0]\n      if (firstPath && this.isLocale(firstPath)) {\n        return this.isoFormat(firstPath)\n      }\n    } catch (e) {}\n\n    return this.isoFormat(fallback)\n  }\n}\n\nconst regionist = new Regionist()\n\nexport {regionist, currencyCodes, callingCodes, countryLanguages, timezones} "],"names":["Regionist","params","_classCallCheck","_defineProperty","_reduceInstanceProperty","countryLanguages","memo","c","_mapInstanceProperty","l","_indexOfInstanceProperty","push","_Object$keys","timezone","country","nativeLanguage","preferredLanguage","locale","callingCode","currencyCode","opts","remember","_classPrivateFieldSet","generateLocaleLikesFromNavigator","guessTimezone","guessCountry","findNativeLanguage","findPreferredLanguage","constructLocale","findCallingCode","findCurrencyCode","store","get","_classPrivateFieldGet","set","m","k","currencyCodes","hasOwnProperty","callingCodes","languagesWithinhNavigator","_sliceInstanceProperty","length","languagesWithinCountry","possibleNativeLanguages","_filterInstanceProperty","countriesWithinSameTimezone","tz","toLowerCase","timezones","_tz","countriesWithinNavigator","split","countryMatches","Intl","DateTimeFormat","resolvedOptions","timeZone","error","jstz","determine","name","result","window","n","navigator","languages","language","userLanguage","r","isoFormat","v","countries","toUpperCase","arr","isLanguage","isCountry","lang","isLocale","formatted","format","localeLikes","Array","isArray","matches1","matches2","matches3","langMatch","fallback","path","p","location","pathname","firstPath","e","regionist"],"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"}