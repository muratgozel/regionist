{"version":3,"file":"regionist.iife.js","sources":["../src/index.ts"],"sourcesContent":["import { BROWSER } from 'esm-env'\nimport timezoneCountryMappingJson from './timezoneCountryMapping.json'\n\nexport const regionist = {\n    match,\n    guess\n}\n\nexport function match(list: string[], fallback: string = 'xx-XX') {\n    const _list = list\n        .map((item) => formatListItem(item))\n        .filter((item) => item) as string[]\n    const result = guess()\n\n    const found = _list.find((_locale) => {\n        const _language = _locale.includes('-') ? _locale.split('-')[0] : _locale\n        const _country = _locale.includes('-') ? _locale.split('-')[1] : undefined\n\n        // full locale match\n        if (result.preferredLocale && result.preferredLocale === _locale) {\n            return true\n        }\n\n        // country match\n        if (result.preferredLocale && _country) {\n            const preferredCountry = result.preferredLocale.split('-')[1]\n            if (_country === preferredCountry) {\n                return true\n            }\n        }\n\n        if (result.timezoneCountry && _country && result.timezoneCountry === _country) {\n            return true\n        }\n\n        // language match\n        if (_language && result.preferredLanguage === _language) {\n            return true\n        }\n\n        return false\n    })\n\n    return found ?? fallback\n\n    function formatListItem(text: string) {\n        const arr = text.replace('_', '-').split('-')\n\n        if (arr.length === 1) {\n            return text.toLowerCase()\n        }\n\n        if (arr.length === 2) {\n            return arr[0]!.toLowerCase() + '-' + arr[1]!.toUpperCase()\n        }\n\n        return undefined\n    }\n}\n\nexport function guess(global: Window & typeof globalThis | undefined = BROWSER ? window : undefined): RegionistGuess {\n    const findings: RegionistFindings = {}\n    const result: RegionistGuess = {}\n\n    if (!global) {\n        return result\n    }\n\n    readGlobalIntlObject()\n    readGlobalNavigator()\n\n    if ((findings.windowNavigatorLanguages ?? []).length > 0) {\n        const first = findings.windowNavigatorLanguages![0]!\n        result[first.includes('-') ? 'preferredLocale' : 'preferredLanguage'] = first\n\n        if ('preferredLocale' in result) {\n            result.preferredLanguage = result.preferredLocale.split('-')[0]!\n        }\n    }\n\n    // trust timezone finding, if there is\n    if (findings.windowIntlTimezone) {\n        result.timezone = findings.windowIntlTimezone\n\n        const possibleCountries = result.timezone in timezoneCountryMappingJson\n            ? timezoneCountryMappingJson[result.timezone as keyof typeof timezoneCountryMappingJson]\n            : []\n        if (possibleCountries.length === 1) {\n            result.timezoneCountry = possibleCountries[0]!\n        }\n\n        if (possibleCountries.length > 1 && findings.windowNavigatorLanguages) {\n            const foundCountry = getCountriesFromNavigatorLanguages(findings.windowNavigatorLanguages)\n                .find((code) => possibleCountries.includes(code))\n            if (foundCountry) {\n                result.timezoneCountry = foundCountry\n            }\n        }\n    }\n\n    return result\n\n    function readGlobalIntlObject() {\n        try {\n            const obj = global!.Intl.DateTimeFormat().resolvedOptions()\n            findings.windowIntlTimezone = obj.timeZone\n            findings.windowIntlLocale = obj.locale\n        } catch (e: unknown) {\n            console.warn(new Error('[regionist]: no global.Intl support', { cause: e }))\n            return\n        }\n    }\n\n    function readGlobalNavigator() {\n        const n = global!.navigator\n\n        if (('languages' in n) && n.languages && n.languages.length > 0) {\n            findings.windowNavigatorLanguages = Array.from(n.languages)\n        }\n        else if (n.language) {\n            findings.windowNavigatorLanguages = [n.language]\n        }\n    }\n\n    function getCountriesFromNavigatorLanguages(list: string[]) {\n        return list\n            .filter((text) => text.includes('-'))\n            .map((text) => text.split('-')[1]!)\n    }\n}\n\nexport interface RegionistGuess {\n    preferredLanguage?: string\n    preferredLocale?: string\n    timezone?: string\n    timezoneCountry?: string\n}\n\ninterface RegionistFindings {\n    windowIntlTimezone?: string\n    windowIntlLocale?: string\n    windowNavigatorLanguages?: string[]\n}\n"],"names":["regionist","match","guess","list","fallback","_list","map","item","text","arr","replace","split","length","toLowerCase","toUpperCase","formatListItem","filter","result","found","find","_locale","_language","includes","_country","undefined","preferredLocale","timezoneCountry","preferredLanguage","_findings$windowNavig","global","arguments","BROWSER","window","findings","obj","Intl","DateTimeFormat","resolvedOptions","windowIntlTimezone","timeZone","windowIntlLocale","locale","e","console","warn","Error","cause","readGlobalIntlObject","n","navigator","languages","windowNavigatorLanguages","Array","from","language","readGlobalNavigator","first","timezone","possibleCountries","timezoneCountryMappingJson","foundCountry","code"],"mappings":"goVAGO,MAAMA,EAAY,CACrBC,QACAC,kBAGYD,EAAME,GAA0C,IAA1BC,yDAAmB,QACrD,MAAMC,EAAQF,EACTG,KAAKC,GAmCV,SAAwBC,GACpB,MAAMC,EAAMD,EAAKE,QAAQ,IAAK,KAAKC,MAAM,KAEzC,GAAmB,IAAfF,EAAIG,OACJ,OAAOJ,EAAKK,cAGhB,GAAmB,IAAfJ,EAAIG,OACJ,OAAOH,EAAI,GAAII,cAAgB,IAAMJ,EAAI,GAAIK,cAGjD,MACJ,CA/CmBC,CAAeR,KAC7BS,QAAQT,GAASA,IAChBU,EAASf,IAETgB,EAAQb,EAAMc,MAAMC,IACtB,MAAMC,EAAYD,EAAQE,SAAS,KAAOF,EAAQT,MAAM,KAAK,GAAKS,EAC5DG,EAAWH,EAAQE,SAAS,KAAOF,EAAQT,MAAM,KAAK,QAAKa,EAGjE,GAAIP,EAAOQ,iBAAmBR,EAAOQ,kBAAoBL,EACrD,OAAO,EAIX,GAAIH,EAAOQ,iBAAmBF,EAAU,CAEpC,GAAIA,IADqBN,EAAOQ,gBAAgBd,MAAM,KAAK,GAEvD,OAAO,CAEf,CAEA,SAAIM,EAAOS,kBAAmBH,GAAYN,EAAOS,kBAAoBH,OAKjEF,GAAaJ,EAAOU,oBAAsBN,EAIlC,IAGhB,OAAOH,QAAAA,EAASd,CAepB,CAEgB,SAAAF,IAAmF,IAAA0B,EAAA,IAA7EC,EAAAC,UAAAlB,eAAAY,IAAAM,UAAA,GAAAA,UAAiDC,GAAUC,OAC7E,MAAMC,EAA8B,CAAE,EAChChB,EAAyB,CAAE,EAEjC,IAAKY,EACD,OAAOZ,EAMX,GA+BA,WACI,IACI,MAAMiB,EAAML,EAAQM,KAAKC,iBAAiBC,kBAC1CJ,EAASK,mBAAqBJ,EAAIK,SAClCN,EAASO,iBAAmBN,EAAIO,MACnC,CAAC,MAAOC,GAEL,YADAC,QAAQC,KAAK,IAAIC,MAAM,sCAAuC,CAAEC,MAAOJ,IAE3E,CACJ,CA3CAK,GA6CA,WACI,MAAMC,EAAInB,EAAQoB,UAEb,cAAeD,GAAMA,EAAEE,WAAaF,EAAEE,UAAUtC,OAAS,EAC1DqB,EAASkB,yBAA2BC,MAAMC,KAAKL,EAAEE,WAE5CF,EAAEM,WACPrB,EAASkB,yBAA2B,CAACH,EAAEM,UAE/C,CArDAC,IAEsC3B,QAAlCA,EAACK,EAASkB,gCAAwBvB,IAAAA,EAAAA,EAAI,IAAIhB,OAAS,EAAG,CACtD,MAAM4C,EAAQvB,EAASkB,yBAA0B,GACjDlC,EAAOuC,EAAMlC,SAAS,KAAO,kBAAoB,qBAAuBkC,EAEpE,oBAAqBvC,IACrBA,EAAOU,kBAAoBV,EAAOQ,gBAAgBd,MAAM,KAAK,GAErE,CAGA,GAAIsB,EAASK,mBAAoB,CAC7BrB,EAAOwC,SAAWxB,EAASK,mBAE3B,MAAMoB,EAAoBzC,EAAOwC,YAAYE,EACvCA,EAA2B1C,EAAOwC,UAClC,GAKN,GAJiC,IAA7BC,EAAkB9C,SAClBK,EAAOS,gBAAkBgC,EAAkB,IAG3CA,EAAkB9C,OAAS,GAAKqB,EAASkB,yBAA0B,CACnE,MAAMS,GAgC8BzD,EAhCoB8B,EAASkB,yBAiC9DhD,EACFa,QAAQR,GAASA,EAAKc,SAAS,OAC/BhB,KAAKE,GAASA,EAAKG,MAAM,KAAK,MAlC1BQ,MAAM0C,GAASH,EAAkBpC,SAASuC,KAC3CD,IACA3C,EAAOS,gBAAkBkC,EAEjC,CACJ,CA0BA,IAA4CzD,EAxB5C,OAAOc,CA6BX"}